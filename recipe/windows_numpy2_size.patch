From 1cda2a40db79fac064edaa86ffe39975938f571b Mon Sep 17 00:00:00 2001
From: Christoph Groth <christoph.groth@cea.fr>
Date: Fri, 25 Apr 2025 15:33:08 +0200
Subject: [PATCH 1/2] Trivially address some lints in the tests

---
 test_tinyarray.py | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/test_tinyarray.py b/test_tinyarray.py
index 427e1f3..dd0bbb4 100644
--- a/test_tinyarray.py
+++ b/test_tinyarray.py
@@ -7,7 +7,8 @@
 # top-level directory of this distribution and at
 # https://gitlab.kwant-project.org/kwant/tinyarray.
 
-import operator, warnings
+import operator
+import warnings
 import platform
 import itertools as it
 import tinyarray as ta
@@ -32,6 +33,7 @@ def machine_wordsize():
     else:
         raise RuntimeError('unknown architecture', bits)
 
+
 dtypes = [int, float, complex]
 
 some_shapes = [(), 0, 1, 2, 3,
@@ -51,7 +53,7 @@ def make(shape, dtype):
 def shape_of_seq(seq, r=()):
     try:
         l = len(seq)
-    except:
+    except Exception:
         return r
     if l == 0:
         return r + (0,)
@@ -206,7 +208,7 @@ def test_conversion():
                 if dtype is not float:
                     # This solicitates the buffer interface.
                     x = np.array(x)
-                    assert(x.dtype == dtype)
+                    assert x.dtype == dtype
                     raises(OverflowError, ta.array, x, int)
 
             for x in [-n, min(n-1, np.nextafter(n, 0, dtype=dtype))]:
@@ -215,7 +217,7 @@ def test_conversion():
                 if dtype is not float:
                     # This solicitates the buffer interface.
                     x = np.array(x)
-                    assert(x.dtype == dtype)
+                    assert x.dtype == dtype
                     ta.array(x, int)
 
 
@@ -387,7 +389,6 @@ def test_binary_operators():
                     assert_equal(op(ta.array(a), ta.array(b)), op(a, b))
 
 
-
 def test_binary_ufuncs():
     with warnings.catch_warnings():
         warnings.filterwarnings("ignore", category=RuntimeWarning)
@@ -431,12 +432,12 @@ def test_unary_ufuncs():
                 else:
                     assert ta_func(a.tolist()) == np_func(a)
         for x in [-987654322.5, -987654321.5, -4.51, -3.51, -2.5, -2.0,
-                   -1.7, -1.5, -0.5, -0.3, -0.0, 0.0, 0.3, 0.5, 1.5, 1.7,
-                   2.0, 2.5, 3.51, 4.51, 987654321.5, 987654322.5]:
+                  -1.7, -1.5, -0.5, -0.3, -0.0, 0.0, 0.3, 0.5, 1.5, 1.7,
+                  2.0, 2.5, 3.51, 4.51, 987654321.5, 987654322.5]:
             if x == -0.5 and name == "round":
-                # Work around an inconsistency in NumPy: on Unix, np.round(-0.5)
-                # is -0.0, and on Windows it is 0.0, while np.ceil(-0.5) is -0.0
-                # always.
+                # Work around an inconsistency in NumPy: on Unix,
+                # np.round(-0.5) is -0.0, and on Windows it is 0.0, while
+                # np.ceil(-0.5) is -0.0 always.
                 assert ta.round(-0.5) == -0.0
             else:
                 assert ta_func(x) == np_func(x)
@@ -452,8 +453,7 @@ def test_other_scalar_types():
 
 
 def test_sizeof():
-    obj = object()
-    word_size = machine_wordsize()
+    wordsize = machine_wordsize()
     for shape in some_shapes:
         for dtype in dtypes:
             a = ta.zeros(shape, dtype)
@@ -463,7 +463,7 @@ def test_sizeof():
             # if the array is > 1D then the shape is stored
             # at the start of the buffer
             if len(a.shape) > 1:
-                n_elements += (a.ndim * machine_wordsize() +
+                n_elements += (a.ndim * wordsize +
                                ta.dtype_size[dtype] - 1) // ta.dtype_size[dtype]
             buffer_size = n_elements * ta.dtype_size[dtype]
 
@@ -471,7 +471,7 @@ def test_sizeof():
             # debug mode.
             debug = hasattr(sys, "gettotalrefcount")
             sizeof_should_be = (buffer_size
-                                + machine_wordsize() * (5 if debug else 3))
+                                + wordsize * (5 if debug else 3))
             assert sizeof == sizeof_should_be
 
 
-- 
2.47.0


From 99c2fd8396de4f8a833d5b7a3124bb80452046d8 Mon Sep 17 00:00:00 2001
From: Christoph Groth <christoph.groth@cea.fr>
Date: Fri, 25 Apr 2025 15:51:21 +0200
Subject: [PATCH 2/2] Adapt test to NumPy 2 changing int width on 64 bit
 Windows

---
 test_tinyarray.py | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/test_tinyarray.py b/test_tinyarray.py
index dd0bbb4..c71098e 100644
--- a/test_tinyarray.py
+++ b/test_tinyarray.py
@@ -40,9 +40,17 @@ some_shapes = [(), 0, 1, 2, 3,
                (0, 0), (1, 0), (0, 1), (2, 2), (17, 17),
                (0, 0, 0), (1, 1, 1), (2, 2, 1), (2, 0, 3)]
 
+sizeof_c_long = ctypes.sizeof(ctypes.c_long)
+
+if np.array(0).itemsize == sizeof_c_long:
+    np_int_dtype = int
+else:
+    # Special case for NumPy 2 on Windows.
+    np_int_dtype = eval('np.int' + str(sizeof_c_long * 8))
+
 
 def make(shape, dtype):
-    result = np.arange(np.prod(shape), dtype=int)
+    result = np.arange(np.prod(shape), dtype=np_int_dtype)
     if dtype in (float, complex):
         result = result + 0.1 * result
     if dtype == complex:
@@ -171,7 +179,7 @@ def test_conversion():
 
     # Determine maximum value of the C "long" type.  This is different from
     # sys.maxsize, notably on 64 bit Windows.
-    maxlong = 2 ** (ctypes.sizeof(ctypes.c_long) * 8 - 1) - 1
+    maxlong = 2 ** (sizeof_c_long * 8 - 1) - 1
 
     # Check correct overflow detection when integers are used to initialize
     # integer tinyarrays.
-- 
2.47.0

